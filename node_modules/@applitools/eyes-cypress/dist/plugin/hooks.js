"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const handleTestResults_1 = __importDefault(require("./handleTestResults"));
function makeGlobalRunHooks({ closeManagers, closeBatches, closeUniversalServer, }) {
    return {
        'before:run': ({ config }) => {
            if (!config.isTextTerminal)
                return;
        },
        'after:run': async ({ config }) => {
            try {
                if (!config.isTextTerminal)
                    return;
                const summaries = await closeManagers();
                const testResults = summaries.map(({ results }) => results.map(({ result }) => result)).flat();
                if (!config.appliConfFile.dontCloseBatches) {
                    await closeBatches({
                        batchId: config.appliConfFile.batchId || config.appliConfFile.batch.id,
                        eyesServerUrl: config.appliConfFile.serverUrl,
                        proxy: config.appliConfFile.proxy,
                        apiKey: config.appliConfFile.apiKey,
                    });
                }
                if (config.appliConfFile.tapDirPath) {
                    handleTestResults_1.default.handleBatchResultsFile(testResults, {
                        tapDirPath: config.appliConfFile.tapDirPath,
                        tapFileName: config.appliConfFile.tapFileName,
                    });
                }
                const resultConfig = {
                    showLogs: config.appliConfFile.showLogs,
                    shouldThrowError: config.appliConfFile.failCypressAfterAllSpecs,
                };
                if (config.appliConfFile.failCypressAfterAllSpecs) {
                    // we want to throw an exception in case we have a least one test with diffs
                    // we create a runner per spec file, therefore we could have multiple summeries
                    for (const summary of summaries) {
                        handleTestResults_1.default.printTestResults({ testResults: summary.results.map(({ result }) => result), resultConfig });
                    }
                }
            }
            finally {
                await closeUniversalServer();
            }
        },
    };
}
exports.default = makeGlobalRunHooks;
