"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const isGlobalHooksSupported_1 = __importDefault(require("./isGlobalHooksSupported"));
// @ts-ignore
const functional_commons_1 = require("@applitools/functional-commons");
const hooks_1 = __importDefault(require("./hooks"));
function makePluginExport({ startServer, eyesConfig, }) {
    return function pluginExport(pluginInitArgs) {
        let eyesServer, pluginModuleExports, pluginExportsE2E, pluginExportsComponent;
        let pluginExports;
        if (pluginInitArgs.exports) {
            const pluginAsNodeJSModule = pluginInitArgs;
            pluginExports =
                pluginAsNodeJSModule.exports && pluginAsNodeJSModule.exports.default
                    ? pluginAsNodeJSModule.exports.default
                    : pluginAsNodeJSModule.exports;
            if (pluginExports.component) {
                pluginExportsComponent = pluginExports.component.setupNodeEvents;
            }
            if (pluginExports.e2e) {
                pluginExportsE2E = pluginExports.e2e.setupNodeEvents;
            }
            if (!pluginExports.e2e && !pluginExports.component) {
                pluginModuleExports = pluginExports;
            }
            if (pluginExports === null || pluginExports === void 0 ? void 0 : pluginExports.component) {
                pluginExports.component.setupNodeEvents = setupNodeEvents;
            }
            if (pluginExports === null || pluginExports === void 0 ? void 0 : pluginExports.e2e) {
                pluginExports.e2e.setupNodeEvents = setupNodeEvents;
            }
            if (!pluginExports.component && !pluginExports.e2e) {
                if (pluginAsNodeJSModule.exports.default) {
                    pluginAsNodeJSModule.exports.default = setupNodeEvents;
                }
                else {
                    pluginAsNodeJSModule.exports = setupNodeEvents;
                }
            }
        }
        else {
            // this is required because we are currently support cypress < 10
            // in the version before 10 the `e2e.setupNodeEvents` and `component.setupNodeEvents` were not supported
            const pluginAsCypress10PluginOptions = pluginInitArgs;
            if (pluginAsCypress10PluginOptions.component) {
                pluginExportsComponent = pluginAsCypress10PluginOptions.component.setupNodeEvents;
                pluginAsCypress10PluginOptions.component.setupNodeEvents = setupNodeEvents;
            }
            if (pluginAsCypress10PluginOptions.e2e) {
                pluginExportsE2E = pluginAsCypress10PluginOptions.e2e.setupNodeEvents;
                pluginAsCypress10PluginOptions.e2e.setupNodeEvents = setupNodeEvents;
            }
        }
        if (!pluginInitArgs.exports) {
            return pluginInitArgs;
        }
        return function getCloseServer() {
            return new Promise(res => eyesServer.close(() => res()));
        };
        async function setupNodeEvents(origOn, cypressConfig) {
            const { server, port, closeManagers, closeBatches, closeUniversalServer } = await startServer(cypressConfig);
            eyesServer = server;
            const globalHooks = (0, hooks_1.default)({
                closeManagers,
                closeBatches,
                closeUniversalServer,
            });
            if (!pluginModuleExports) {
                pluginModuleExports = cypressConfig.testingType === 'e2e' ? pluginExportsE2E : pluginExportsComponent;
            }
            const isGlobalHookCalledFromUserHandlerMap = new Map();
            eyesConfig.eyesIsGlobalHooksSupported = (0, isGlobalHooksSupported_1.default)(cypressConfig);
            let moduleExportsResult = {};
            // in case setupNodeEvents is not defined in cypress.config file
            if (typeof pluginModuleExports === 'function') {
                moduleExportsResult = await pluginModuleExports(onThatCallsUserDefinedHandler, cypressConfig);
            }
            if (eyesConfig.eyesIsGlobalHooksSupported) {
                for (const [eventName, eventHandler] of Object.entries(globalHooks)) {
                    if (!isGlobalHookCalledFromUserHandlerMap.get(eventName)) {
                        origOn.call(this, eventName, eventHandler);
                    }
                }
            }
            return Object.assign({}, eyesConfig, { eyesPort: port }, moduleExportsResult, {
                isComponent: (cypressConfig === null || cypressConfig === void 0 ? void 0 : cypressConfig.testingType) === 'component',
            });
            // This piece of code exists because at the point of writing, Cypress does not support multiple event handlers:
            // https://github.com/cypress-io/cypress/issues/5240#issuecomment-948277554
            // So we wrap Cypress' `on` function in order to wrap the user-defined handler. This way we can call our own handler
            // in addition to the user's handler
            function onThatCallsUserDefinedHandler(eventName, handler) {
                const isRunEvent = eventName === 'before:run' || eventName === 'after:run';
                let handlerToCall = handler;
                if (eyesConfig.eyesIsGlobalHooksSupported && isRunEvent) {
                    handlerToCall = handlerThatCallsUserDefinedHandler;
                    isGlobalHookCalledFromUserHandlerMap.set(eventName, true);
                }
                return origOn.call(this, eventName, handlerToCall);
                async function handlerThatCallsUserDefinedHandler(...args) {
                    const [err] = await (0, functional_commons_1.presult)(Promise.resolve(globalHooks[eventName].apply(this, args)));
                    await handler.apply(this, args);
                    if (err) {
                        throw err;
                    }
                }
            }
        }
    };
}
exports.default = makePluginExport;
