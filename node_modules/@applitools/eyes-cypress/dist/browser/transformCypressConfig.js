"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformCypressConfig = void 0;
const utils_1 = require("./utils");
const utils = __importStar(require("@applitools/utils"));
function transformCypressConfig(config) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    return {
        open: {
            apiKey: config.apiKey,
            eyesServerUrl: config.serverUrl,
            proxy: config.proxy,
            appName: config.appName,
            testName: config.testName,
            displayName: config.displayName,
            batch: {
                ...config.batch,
                id: (_a = config.batchId) !== null && _a !== void 0 ? _a : (_b = config.batch) === null || _b === void 0 ? void 0 : _b.id,
                name: (_c = config.batchName) !== null && _c !== void 0 ? _c : (_d = config.batch) === null || _d === void 0 ? void 0 : _d.name,
                sequenceName: (_e = config.batchSequenceName) !== null && _e !== void 0 ? _e : (_f = config.batch) === null || _f === void 0 ? void 0 : _f.sequenceName,
                notifyOnCompletion: (_g = config.notifyOnCompletion) !== null && _g !== void 0 ? _g : (_h = config.batch) === null || _h === void 0 ? void 0 : _h.notifyOnCompletion,
            },
            keepBatchOpen: !config.shouldDoPostSpecTasks,
            environmentName: config.envName,
            baselineBranchName: config.baselineBranchName,
            branchName: config.branchName,
            parentBranchName: config.parentBranchName,
            compareWithParentBranch: config.compareWithParentBranch,
            ignoreBaseline: config.ignoreBaseline,
            ignoreGitBranching: config.ignoreGitMergeBase,
            saveDiffs: config.saveDiffs,
            properties: config.properties,
            environment: {
                viewportSize: config.viewportSize,
            },
            isComponentTest: config.isComponentTest,
        },
        check: {
            environments: (0, utils_1.transformBrowsers)(config.browser),
            matchLevel: config.matchLevel,
            ignoreCaret: config.ignoreCaret,
            ignoreDisplacements: config.ignoreDisplacements,
            accessibilitySettings: (0, utils_1.transformAccessibilityValidation)(config.accessibilityValidation),
            layoutBreakpoints: config.layoutBreakpoints
                ? utils.types.has(config.layoutBreakpoints, 'breakpoints')
                    ? config.layoutBreakpoints
                    : { breakpoints: config.layoutBreakpoints }
                : undefined,
            sendDom: config.sendDom,
            useDom: config.useDom,
            enablePatterns: config.enablePatterns,
            ufgOptions: config.visualGridOptions,
            disableBrowserFetching: config.disableBrowserFetching,
            hooks: config.scriptHooks,
        },
        screenshot: {
            waitBeforeCapture: config.waitBeforeCapture,
        },
        close: {
            updateBaselineIfNew: config.saveNewTests,
        },
    };
}
exports.transformCypressConfig = transformCypressConfig;
