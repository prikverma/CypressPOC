"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transport = void 0;
const utils = __importStar(require("@applitools/utils"));
exports.transport = {
    isReady(socket) {
        return socket.readyState === 1; // OPEN
    },
    onReady(socket, callback) {
        socket.addEventListener('open', callback);
        return () => socket.removeEventListener('open', callback);
    },
    onMessage(socket, callback) {
        const handler = (event) => callback(event.data);
        socket.addEventListener('message', handler);
        return () => socket.removeEventListener('message', handler);
    },
    onClose(socket, callback) {
        socket.addEventListener('close', () => callback());
        return () => socket.removeEventListener('close', callback);
    },
    onError(socket, callback) {
        const handler = (event) => callback(event.error);
        socket.addEventListener('error', handler);
        return () => socket.removeEventListener('error', handler);
    },
    send(socket, data) {
        socket.send(data);
    },
    serialize(data) {
        return JSON.stringify(data);
    },
    deserialize(data) {
        return JSON.parse(utils.types.isString(data) ? data : new TextDecoder().decode(data));
    },
};
exports.default = exports.transport;
