/// <reference types="node" />
import { type IncomingMessage, type ServerResponse } from 'http';
interface Router {
    get(pattern: string | RegExp, callback: (options: {
        match: RegExpMatchArray;
    }) => Promise<void> | void): void;
    post(pattern: string | RegExp, callback: (options: {
        match: RegExpMatchArray;
    }) => Promise<void> | void): void;
    put(pattern: string | RegExp, callback: (options: {
        match: RegExpMatchArray;
    }) => Promise<void> | void): void;
    delete(pattern: string | RegExp, callback: (options: {
        match: RegExpMatchArray;
    }) => Promise<void> | void): void;
    any(pattern: string | RegExp, callback: (options: {
        match: RegExpMatchArray;
    }) => Promise<void> | void): void;
    fallback(callback: () => Promise<void> | void): void;
    catch(callback: (options: {
        error: any;
    }) => Promise<void> | void): void;
    finally(callback: () => Promise<void> | void): void;
}
export declare function makeCallback(handler: (options: {
    router: Router;
    request: IncomingMessage;
    response: ServerResponse;
}) => void): (request: IncomingMessage, response: ServerResponse) => Promise<void>;
export {};
