"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeSelector = exports.isSimpleCommonSelector = exports.isComplexSelector = exports.isSelector = void 0;
const utils = __importStar(require("@applitools/utils"));
function isSelector(selector, spec) {
    var _a;
    return ((spec === null || spec === void 0 ? void 0 : spec.isSelector(selector)) ||
        ((_a = spec === null || spec === void 0 ? void 0 : spec.isSecondarySelector) === null || _a === void 0 ? void 0 : _a.call(spec, selector)) ||
        utils.types.isString(selector) ||
        isComplexSelector(selector, spec));
}
exports.isSelector = isSelector;
function isComplexSelector(selector, spec) {
    return (utils.types.isPlainObject(selector) &&
        utils.types.has(selector, 'selector') &&
        Object.keys(selector).every(key => ['selector', 'type', 'frame', 'shadow', 'child', 'fallback'].includes(key)) &&
        (utils.types.isString(selector.selector) || !!(spec === null || spec === void 0 ? void 0 : spec.isSelector(selector.selector))));
}
exports.isComplexSelector = isComplexSelector;
function isSimpleCommonSelector(selector) {
    return utils.types.isString(selector) || isComplexSelector(selector);
}
exports.isSimpleCommonSelector = isSimpleCommonSelector;
function makeSelector(options) {
    var _a, _b;
    const { spec, environment } = options;
    let selector = options.selector;
    if ((environment === null || environment === void 0 ? void 0 : environment.isWeb) && isComplexSelector(selector, spec)) {
        if (selector.type === 'id')
            selector = { type: 'css', selector: `#${selector.selector}` };
        else if (selector.type === 'name')
            selector = { type: 'css', selector: `[name="${selector.selector}"]` };
        else if (selector.type === 'class name')
            selector = { type: 'css', selector: `.${selector.selector}` };
        else if (selector.type === 'tag name')
            selector = { type: 'css', selector: `${selector.selector}` };
    }
    return (_b = (_a = spec.toSelector) === null || _a === void 0 ? void 0 : _a.call(spec, selector)) !== null && _b !== void 0 ? _b : selector;
}
exports.makeSelector = makeSelector;
