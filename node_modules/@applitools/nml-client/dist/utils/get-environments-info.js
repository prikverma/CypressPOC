"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNMLEnvironmentsInfo = void 0;
const utils = __importStar(require("@applitools/utils"));
const req_1 = __importDefault(require("@applitools/req"));
const getNMLSupportedEnvironmentsWithCache = utils.general.cachify(getNMLSupportedEnvironments);
async function getNMLSupportedEnvironments({ supportedEnvironmentsUrl, proxy, }) {
    const response = await (0, req_1.default)(supportedEnvironmentsUrl, { proxy });
    const result = await response.json();
    return result;
}
async function getNMLEnvironmentsInfo({ environments, supportedEnvironmentsUrl, proxy, logger: _logger, }) {
    const supportedEnvironments = await getNMLSupportedEnvironmentsWithCache({ supportedEnvironmentsUrl, proxy });
    return environments.reduce((result, environment) => {
        var _a;
        if (!utils.types.has(environment, 'iosDeviceInfo') && !utils.types.has(environment, 'androidDeviceInfo')) {
            result.localEnvironment = environment;
        }
        else {
            const deviceInfo = utils.types.has(environment, 'iosDeviceInfo')
                ? environment.iosDeviceInfo
                : environment.androidDeviceInfo;
            const orientation = deviceInfo.screenOrientation === 'landscape' ? 'landscapeLeft' : (_a = deviceInfo.screenOrientation) !== null && _a !== void 0 ? _a : 'portrait';
            const rawEnvironment = supportedEnvironments[deviceInfo.deviceName][orientation].env;
            result.renderEnvironments.push({
                requested: environment,
                environmentId: utils.general.guid(),
                deviceName: rawEnvironment.deviceInfo,
                os: rawEnvironment.os + (deviceInfo.version ? ` ${deviceInfo.version}` : ''),
                viewportSize: rawEnvironment.displaySize,
            });
            result.environmentSettings.push({ ...supportedEnvironments[deviceInfo.deviceName], orientation });
        }
        return result;
    }, {
        localEnvironment: undefined,
        renderEnvironments: [],
        environmentSettings: [],
    });
}
exports.getNMLEnvironmentsInfo = getNMLEnvironmentsInfo;
