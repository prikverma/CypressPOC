"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.freezeGif = exports.fromGifBuffer = exports.extractGifSize = exports.isGifBuffer = void 0;
const gif = __importStar(require("omggif"));
function isGifBuffer(buffer) {
    return ['GIF87a', 'GIF89a'].includes(new TextDecoder().decode(buffer.subarray(0, 6)));
}
exports.isGifBuffer = isGifBuffer;
function extractGifSize(buffer) {
    const view = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    return { width: view.getUint16(6, true), height: view.getUint16(8, true) };
}
exports.extractGifSize = extractGifSize;
async function fromGifBuffer(buffer) {
    const reader = new gif.GifReader(buffer);
    const data = new Uint8Array(reader.width * reader.height * 4).fill(0);
    reader.decodeAndBlitFrameRGBA(0, data);
    return { width: reader.width, height: reader.height, data };
}
exports.fromGifBuffer = fromGifBuffer;
async function freezeGif(buffer) {
    const reader = new gif.GifReader(buffer);
    if (reader.numFrames() === 0)
        return buffer;
    const frame = reader.frameInfo(0);
    return buffer.subarray(0, frame.data_offset + frame.data_length);
}
exports.freezeGif = freezeGif;
