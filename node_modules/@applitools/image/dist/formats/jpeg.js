"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromJpegBuffer = exports.extractJpegSize = exports.isJpegBuffer = void 0;
const jpeg = __importStar(require("jpeg-js"));
function isJpegBuffer(buffer) {
    return ['JFIF', 'Exif'].includes(new TextDecoder().decode(buffer.subarray(6, 10)));
}
exports.isJpegBuffer = isJpegBuffer;
function extractJpegSize(buffer) {
    const view = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    // skip file signature
    let offset = 4;
    while (view.byteLength > offset) {
        // extract length of the block
        offset += view.getUint16(offset);
        // if next segment is SOF0 or SOF2 extract size
        if (view.getUint8(offset + 1) === 0xc0 || view.getUint8(offset + 1) === 0xc2) {
            return { width: view.getUint16(offset + 7), height: view.getUint16(offset + 5) };
        }
        else {
            // skip block signature
            offset += 2;
        }
    }
    return { width: 0, height: 0 };
}
exports.extractJpegSize = extractJpegSize;
async function fromJpegBuffer(buffer) {
    return jpeg.decode(buffer, { tolerantDecoding: true, formatAsRGBA: true });
}
exports.fromJpegBuffer = fromJpegBuffer;
