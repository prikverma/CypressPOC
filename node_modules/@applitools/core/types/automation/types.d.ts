import type { MaybeArray, Size, Region, ControlledPromise } from '@applitools/utils';
import type * as BaseCore from '@applitools/core-base/types';
import { type SpecType, type Driver, type ElementReference, type ContextReference } from '@applitools/driver';
import { type NMLClient, type NMLClientSettings } from '@applitools/nml-client';
import { type Logger } from '@applitools/logger';
export type * from '@applitools/core-base/types';
export type DriverTarget<TSpec extends SpecType> = TSpec['driver'] | Driver<TSpec>;
export type Target<TSpec extends SpecType> = DriverTarget<TSpec> | BaseCore.Target;
export interface DesktopBrowserEnvironment {
    name?: string;
    width: number;
    height: number;
}
export interface ChromeEmulationDeviceEnvironment {
    chromeEmulationInfo: {
        deviceName: string;
        screenOrientation?: string;
    };
}
export interface IOSDeviceEnvironment {
    iosDeviceInfo: {
        deviceName: string;
        version?: string;
        screenOrientation?: string;
    };
}
export interface AndroidDeviceEnvironment {
    androidDeviceInfo: {
        deviceName: string;
        version?: string;
        screenOrientation?: string;
    };
}
export type RenderEnvironment = (DesktopBrowserEnvironment | ChromeEmulationDeviceEnvironment | IOSDeviceEnvironment | AndroidDeviceEnvironment) & {
    environmentId?: string;
    properties?: BaseCore.CustomProperty[];
    fallbackBaselineId?: string;
};
export type ExactEnvironment = BaseCore.Environment & {
    environmentId?: string;
    requested?: RenderEnvironment;
    fallbackBaselineId?: string;
};
export type Environment = RenderEnvironment | ExactEnvironment;
export interface Core<TSpec extends SpecType> extends BaseCore.Core {
    readonly base: BaseCore.Core;
    getViewportSize?(options: {
        target: DriverTarget<TSpec>;
        logger?: Logger;
    }): Promise<Size>;
    setViewportSize?(options: {
        target: DriverTarget<TSpec>;
        size: Size;
        logger?: Logger;
    }): Promise<void>;
    getNMLClient(options: {
        settings: Omit<NMLClientSettings, 'brokerUrl'>;
        driver: Driver<TSpec>;
        logger?: Logger;
    }): Promise<NMLClient>;
    openEyes(options: {
        target?: DriverTarget<TSpec>;
        settings: BaseCore.OpenSettings;
        storage?: EyesStorage;
        logger?: Logger;
    }): Promise<Eyes<TSpec>>;
    locate<TLocator extends string>(options: {
        target: Target<TSpec>;
        settings: LocateSettings<TLocator, TSpec>;
        logger?: Logger;
    }): Promise<BaseCore.LocateResult<TLocator>>;
    locateText<TPattern extends string>(options: {
        target: Target<TSpec>;
        settings: LocateTextSettings<TPattern, TSpec>;
        logger?: Logger;
    }): Promise<BaseCore.LocateTextResult<TPattern>>;
    extractText(options: {
        target: Target<TSpec>;
        settings: MaybeArray<ExtractTextSettings<TSpec>>;
        logger?: Logger;
    }): Promise<string[]>;
}
export interface Eyes<TSpec extends SpecType> extends BaseCore.Eyes {
    readonly core: Core<TSpec>;
    readonly storage: EyesStorage;
    getBaseEyes(options: {
        settings: GetBaseEyesSettings;
        logger?: Logger;
    }): Promise<BaseCore.Eyes>;
    check(options?: {
        target?: Target<TSpec>;
        settings?: CheckSettings<TSpec>;
        logger?: Logger;
    }): Promise<void>;
    checkAndClose(options?: {
        target?: Target<TSpec>;
        settings?: CheckSettings<TSpec> & BaseCore.CloseSettings;
        logger?: Logger;
    }): Promise<void>;
    close(options?: {
        settings?: CloseSettings;
        logger?: Logger;
    }): Promise<void>;
    abort(options?: {
        settings?: AbortSettings;
        logger?: Logger;
    }): Promise<void>;
    getResults(options?: {
        settings?: BaseCore.GetResultsSettings;
        logger?: Logger;
    }): Promise<TestResult[]>;
}
export type EyesStorage = Map<string, {
    eyes: ControlledPromise<BaseCore.Eyes>;
    jobs: Promise<void>[];
}>;
export interface GetBaseEyesSettings {
    environment: Environment;
}
export type LazyLoadOptions = {
    scrollLength?: number;
    waitingTime?: number;
    maxAmountToScroll?: number;
};
export interface ScreenshotSettings<TSpec extends SpecType> extends BaseCore.ImageSettings<Region | ElementReference<TSpec>> {
    webview?: boolean | string;
    frames?: (ContextReference<TSpec> | {
        frame: ContextReference<TSpec>;
        scrollRootElement?: ElementReference<TSpec>;
    })[];
    fully?: boolean;
    scrollRootElement?: ElementReference<TSpec>;
    stitchMode?: 'Scroll' | 'CSS' | 'Resize';
    screenshotMode?: 'default' | 'applitools-lib';
    hideScrollbars?: boolean;
    hideCaret?: boolean;
    overlap?: {
        top?: number;
        bottom?: number;
    };
    waitBeforeCapture?: number;
    waitBetweenStitches?: number;
    lazyLoad?: boolean | LazyLoadOptions;
    sendDom?: boolean;
}
export type LocateSettings<TLocator extends string, TSpec extends SpecType> = BaseCore.LocateSettings<TLocator, Region | ElementReference<TSpec>> & ScreenshotSettings<TSpec>;
export type LocateTextSettings<TPattern extends string, TSpec extends SpecType> = BaseCore.LocateTextSettings<TPattern, Region | ElementReference<TSpec>> & ScreenshotSettings<TSpec>;
export type ExtractTextSettings<TSpec extends SpecType> = BaseCore.ExtractTextSettings<Region | ElementReference<TSpec>> & ScreenshotSettings<TSpec>;
export type CheckSettings<TSpec extends SpecType> = BaseCore.CheckSettings<Region | ElementReference<TSpec>> & ScreenshotSettings<TSpec> & {
    environments?: Environment[];
};
export type CloseSettings = BaseCore.CloseSettings & {
    environments?: Environment[];
};
export type AbortSettings = BaseCore.AbortSettings & {
    environments?: Environment[];
};
export type TestResult = BaseCore.TestResult & {
    readonly environment: ExactEnvironment;
};
