import { type Logger } from '@applitools/logger';
declare const extractors: {
    js: typeof extractLatestJsPackageVersion & {
        getCachedValues(): Promise<string>[];
        setCachedValue(key: any, value: Promise<string>): void;
        clearCache(): void;
    };
    java: typeof extractLatestJavaPackageVersion & {
        getCachedValues(): Promise<string>[];
        setCachedValue(key: any, value: Promise<string>): void;
        clearCache(): void;
    };
    dotnet: typeof extractLatestDotNetPackageVersion & {
        getCachedValues(): Promise<string>[];
        setCachedValue(key: any, value: Promise<string>): void;
        clearCache(): void;
    };
    python: typeof extractLatestPythonPackageVersion & {
        getCachedValues(): Promise<string>[];
        setCachedValue(key: any, value: Promise<string>): void;
        clearCache(): void;
    };
    ruby: typeof extractLatestRubyPackageVersion & {
        getCachedValues(): Promise<string>[];
        setCachedValue(key: any, value: Promise<string>): void;
        clearCache(): void;
    };
};
export declare function validateSdkVersion(sdk: {
    lang: keyof typeof extractors;
    name: string;
    currentVersion: string;
    latestVersion?: string;
}, { logger }: {
    logger: Logger;
}): Promise<void>;
export declare function extractLatestJsPackageVersion(name: string): Promise<string>;
export declare function extractLatestJavaPackageVersion(name: string): Promise<string>;
export declare function extractLatestDotNetPackageVersion(name: string): Promise<string>;
export declare function extractLatestPythonPackageVersion(name: string): Promise<string>;
export declare function extractLatestRubyPackageVersion(name: string): Promise<string>;
export {};
