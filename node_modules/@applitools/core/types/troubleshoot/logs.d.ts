interface Log {
    label?: string;
    tags?: string[][];
    timestamp?: string;
    level?: string;
    message: string;
}
interface GroupedLog<TGroupedLog extends GroupedLog<TGroupedLog>> {
    [key: string]: TGroupedLog;
}
type StructuredLog = GroupedLog<StructuredLog> & {
    logs?: Log[];
};
type AnalyzedLog = GroupedLog<AnalyzedLog> & {
    logs?: string[];
    startedAt: number;
    finishedAt: number;
    time: number;
    conclusion: string;
};
export declare function parseLogs(logs: string): Log[];
export declare function stringifyLog(log: Log): string;
export declare function structureLogs(logs: Log[]): StructuredLog;
export declare function analyzeLogs({ logs, ...groups }: StructuredLog): AnalyzedLog;
export {};
