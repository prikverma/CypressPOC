import type { Target, DriverTarget, Eyes, CheckSettings, CloseSettings, Environment } from './types';
import type { CheckSettings as BaseCheckSettings, CloseSettings as BaseCloseSettings } from '@applitools/core-base';
import { type AbortSignal } from 'abort-controller';
import { type Logger } from '@applitools/logger';
import { type SpecType, type SpecDriver } from '@applitools/driver';
import * as utils from '@applitools/utils';
type Options<TSpec extends SpecType> = {
    eyes: Eyes<TSpec>;
    target?: DriverTarget<TSpec>;
    environments?: Environment[];
    spec?: SpecDriver<TSpec>;
    signal?: AbortSignal;
    logger: Logger;
};
export declare function makeCheckAndClose<TSpec extends SpecType>({ eyes, target: defaultTarget, environments: defaultEnvironments, spec, signal, logger: mainLogger, }: Options<TSpec>): ({ target, settings, logger, }?: {
    target?: Target<TSpec> | undefined;
    settings?: (BaseCheckSettings<utils.Region | import("@applitools/driver").ElementReference<TSpec>> & import("./types").ScreenshotSettings<TSpec> & {
        environments?: Environment[] | undefined;
    } & {
        retryTimeout?: number | undefined;
    } & BaseCloseSettings & {
        environments?: Environment[] | undefined;
    }) | undefined;
    logger?: Logger | undefined;
}) => Promise<void>;
export {};
