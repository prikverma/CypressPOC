"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeGetBaseEyes = void 0;
const utils = __importStar(require("@applitools/utils"));
function makeGetBaseEyes({ settings: defaultSettings, eyes, logger: mainLogger, }) {
    const getBaseEyesWithCache = utils.general.wrap(getBaseEyes, (getBaseEyes, options) => {
        const key = JSON.stringify(options.settings.environment);
        let item = eyes.storage.get(key);
        if (!item) {
            item = { eyes: utils.promises.makeControlledPromise(), jobs: [] };
            eyes.storage.set(key, item);
        }
        if (!item.eyes.settled)
            item.eyes.resolve(getBaseEyes(options));
        return item.eyes;
    });
    return getBaseEyesWithCache;
    async function getBaseEyes({ settings, logger = mainLogger, }) {
        var _a;
        logger = logger.extend(mainLogger);
        logger.log(`Command "getBaseEyes" is called with settings`, settings);
        const ufgClient = await eyes.core.getUFGClient({
            settings: {
                ...eyes.test.ufgServer,
                eyesServerUrl: eyes.test.eyesServer.eyesServerUrl,
                apiKey: eyes.test.eyesServer.apiKey,
            },
            logger,
        });
        const environment = await ufgClient.getActualEnvironment({
            settings: { environment: settings.environment },
            logger,
        });
        return eyes.core.base.openEyes({
            settings: {
                ...defaultSettings,
                fallbackBaselineId: (_a = settings.environment) === null || _a === void 0 ? void 0 : _a.fallbackBaselineId,
                environment: { ...defaultSettings.environment, ...environment, properties: settings.environment.properties },
            },
            logger,
        });
    }
}
exports.makeGetBaseEyes = makeGetBaseEyes;
