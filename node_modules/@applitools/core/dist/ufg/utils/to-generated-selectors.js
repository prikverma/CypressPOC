"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toGeneratedSelectors = void 0;
function toGeneratedSelectors({ elementReferences, transformElementReference, }) {
    var _a, _b, _c;
    const elementReferencesToMark = [
        (_a = elementReferences.target) !== null && _a !== void 0 ? _a : [],
        (_b = elementReferences.scrolling) !== null && _b !== void 0 ? _b : [],
        (_c = elementReferences.calculate) !== null && _c !== void 0 ? _c : [],
    ].flat();
    return { elementReferencesToMark, getGeneratedSelectors };
    function getGeneratedSelectors(generatedSelectors) {
        var _a, _b, _c;
        let target = undefined;
        let scrolling = undefined;
        let calculate = [];
        if (generatedSelectors) {
            let offset = 0;
            if (elementReferences.target) {
                target = (_a = generatedSelectors[offset++].safeSelector) !== null && _a !== void 0 ? _a : undefined;
                if (!target)
                    throw new Error('Target element not found');
            }
            if (elementReferences.scrolling) {
                scrolling = (_b = generatedSelectors[offset++].safeSelector) !== null && _b !== void 0 ? _b : undefined;
            }
            calculate = generatedSelectors.slice(offset);
        }
        else {
            target = elementReferences.target && transformElementReference(elementReferences.target);
            scrolling = elementReferences.scrolling && transformElementReference(elementReferences.scrolling);
            calculate = ((_c = elementReferences.calculate) !== null && _c !== void 0 ? _c : []).map(elementReference => {
                var _a;
                const selector = (_a = transformElementReference(elementReference)) !== null && _a !== void 0 ? _a : null;
                return { originalSelector: selector, safeSelector: selector };
            });
        }
        return { target, scrolling, calculate };
    }
}
exports.toGeneratedSelectors = toGeneratedSelectors;
