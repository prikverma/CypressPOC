"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applitoolsLibConflictingCapabilitiesWarning = exports.requestedEnvironmentOutOfDriverBoundsWarning = exports.breakpointOutOfDriverBoundsWarning = exports.requestedEnvironmentSmallerThenBreakpointWarning = exports.outdatedSdkVersionWarning = exports.edgeUfgEnvironmentDeprecatedWarning = exports.matchLevelContentDeprecatedWarning = void 0;
exports.matchLevelContentDeprecatedWarning = `The "Content" match level value has been deprecated, use "IgnoreColors" instead.`;
exports.edgeUfgEnvironmentDeprecatedWarning = `The 'edge' option that is being used in your browsers' configuration will soon be deprecated. Please change it to either 'edgelegacy' for the legacy version or to 'edgechromium' for the new Chromium-based version. Please note, when using the built-in BrowserType enum, then the values are BrowserType.EDGE_LEGACY and BrowserType.EDGE_CHROMIUM, respectively.`;
const outdatedSdkVersionWarning = (options) => {
    return `You are using "${options.currentVersion}" and there is a newer version "${options.latestVersion}" of the "${options.name}" SDK.`;
};
exports.outdatedSdkVersionWarning = outdatedSdkVersionWarning;
const requestedEnvironmentSmallerThenBreakpointWarning = (options) => {
    const browsers = options.browsers.map(({ name, width }) => `(${name}, ${width})`).join(', ');
    return `The following configuration's viewport-widths are smaller than the smallest configured layout breakpoint (${options.breakpoint} pixels): [${browsers}]. As a fallback, the resources that will be used for these configurations have been captured on a viewport-width of ${options.breakpoint} - 1 pixels. If an additional layout breakpoint is needed for you to achieve better results - please add it to your configuration.`;
};
exports.requestedEnvironmentSmallerThenBreakpointWarning = requestedEnvironmentSmallerThenBreakpointWarning;
const breakpointOutOfDriverBoundsWarning = (options) => {
    const browsers = options.browsers.map(({ name, width }) => `(${name}, ${width})`).join(', ');
    return `One of the configured layout breakpoints is ${options.requiredWidth} pixels, while your local browser has a limit of ${options.actualWidth}, so the SDK couldn't resize it to the desired size. As a fallback, the resources that will be used for the following configurations: [${browsers}] have been captured on the browser's limit (${options.actualWidth} pixels). To resolve this, you may use a headless browser as it can be resized to any size.`;
};
exports.breakpointOutOfDriverBoundsWarning = breakpointOutOfDriverBoundsWarning;
const requestedEnvironmentOutOfDriverBoundsWarning = (options) => {
    const browsers = options.browsers.map(({ name }) => `(${name})`).join(', ');
    return `The following configurations [${browsers}] have a viewport-width of ${options.requiredWidth} pixels, while your local browser has a limit of ${options.actualWidth} pixels, so the SDK couldn't resize it to the desired size. As a fallback, the resources that will be used for these checkpoints have been captured on the browser's limit (${options.actualWidth} pixels). To resolve this, you may use a headless browser as it can be resized to any size.`;
};
exports.requestedEnvironmentOutOfDriverBoundsWarning = requestedEnvironmentOutOfDriverBoundsWarning;
const applitoolsLibConflictingCapabilitiesWarning = (options) => {
    const conflictingCapabilities = Object.entries(options.conflictingCapabilities)
        .map(entry => entry.join(': '))
        .join(', ');
    return `We have identified ${conflictingCapabilities} in your driver capabilities, this may prevent Applitools Native Library from loading. If you are not sure whether this will cause a problem, contact Support.`;
};
exports.applitoolsLibConflictingCapabilitiesWarning = applitoolsLibConflictingCapabilitiesWarning;
