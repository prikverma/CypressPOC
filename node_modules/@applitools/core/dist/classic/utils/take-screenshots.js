"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.takeScreenshots = void 0;
const take_dom_capture_1 = require("./take-dom-capture");
const take_screenshot_1 = require("../../automation/utils/take-screenshot");
const utils = __importStar(require("@applitools/utils"));
async function takeScreenshots({ driver, settings, logger, }) {
    var _a, _b;
    const screenshot = await (0, take_screenshot_1.takeScreenshot)({ driver, settings, logger });
    const baseTarget = {
        name: await driver.getTitle(),
        source: await driver.getUrl(),
        image: await screenshot.image.toPng(),
        locationInViewport: utils.geometry.location(screenshot.region),
        calculatedRegions: screenshot.calculatedRegions,
        isTransformed: true,
    };
    const environment = await driver.getEnvironment();
    if (environment.isWeb && settings.domSettings) {
        if (settings.fully)
            await ((_a = screenshot.scrollingElement) === null || _a === void 0 ? void 0 : _a.setAttribute('data-applitools-scroll', 'true'));
        else
            await ((_b = screenshot.element) === null || _b === void 0 ? void 0 : _b.setAttribute('data-applitools-scroll', 'true'));
        baseTarget.dom = await (0, take_dom_capture_1.takeDomCapture)({ driver, settings: settings.domSettings, logger }).catch(() => undefined);
    }
    if (settings.calculateView) {
        const scrollingElement = await driver.mainContext.getScrollingElement();
        const scrollingOffset = !scrollingElement || environment.isNative ? { x: 0, y: 0 } : await scrollingElement.getScrollOffset();
        baseTarget.locationInView = utils.geometry.offset(scrollingOffset, screenshot.region);
        baseTarget.fullViewSize = scrollingElement
            ? await scrollingElement.getContentSize()
            : await driver.getViewportSize();
    }
    await screenshot.restoreState();
    return new Array(settings.environments.length).fill(baseTarget);
}
exports.takeScreenshots = takeScreenshots;
