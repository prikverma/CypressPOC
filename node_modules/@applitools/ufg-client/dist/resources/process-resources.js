"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeProcessResources = void 0;
const resource_1 = require("./resource");
const extract_css_dependency_urls_1 = require("../utils/extract-css-dependency-urls");
const extract_svg_dependency_urls_1 = require("../utils/extract-svg-dependency-urls");
const image_1 = require("@applitools/image");
const utils = __importStar(require("@applitools/utils"));
function makeProcessResources({ fetchResource, uploadResource, cache = new Map(), asyncCache, logger: mainLogger, }) {
    return async function processResources({ resources, settings, logger = mainLogger, }) {
        logger = logger.extend(mainLogger, { tags: [`process-resources-${utils.general.shortid()}`] });
        const processedResources = await Object.entries(resources).reduce(async (processedResourcesPromise, [url, resource]) => {
            if (utils.types.has(resource, 'value') || utils.types.has(resource, 'errorStatusCode')) {
                // process contentful resource or failed resource
                // In case of async cache, we don't want another process to fetch the resource. So we take ownership of handling it.
                // If the resource is already in the cache, then we would use the value from the cache rather than the value we have in this memory.
                // The assumption is that the cache can't hold a different value than what we have now.
                const processedResource = asyncCache
                    ? await getCachedResource(resource.id, () => processContentfulResource({ resource, logger }), logger)
                    : await processContentfulResource({ resource, logger });
                return Object.assign(await processedResourcesPromise, { [url]: processedResource });
            }
            else {
                // process url resource with dependencies
                const processedResourceWithDependencies = await processUrlResourceWithDependencies({
                    resource,
                    settings,
                    logger,
                });
                return Object.assign(await processedResourcesPromise, processedResourceWithDependencies);
            }
        }, Promise.resolve({}));
        const mapping = {};
        const ready = [];
        for (const [url, processedResource] of Object.entries(processedResources)) {
            mapping[url] = processedResource.hash;
            ready.push(processedResource.ready);
        }
        return { mapping, promise: Promise.all(ready).then(() => mapping) };
    };
    async function processContentfulResource({ resource, logger = mainLogger, }) {
        var _a;
        if (utils.types.has(resource, 'value')) {
            if (/image\/gif/.test(resource.contentType)) {
                try {
                    logger.log(`Freezing gif image resource with id ${resource.id}`);
                    resource = (0, resource_1.makeResource)({ ...resource, value: await (0, image_1.freezeGif)(resource.value) });
                }
                catch (error) {
                    logger.warn(`Failed to freeze gif image resource with id ${resource.id} due to an error`, error);
                }
            }
            resource.dependencies = (_a = resource.dependencies) === null || _a === void 0 ? void 0 : _a.filter(url => /^https?:/.test(url));
        }
        return persistResource({ resource, logger });
    }
    async function processUrlResource({ resource, settings, logger = mainLogger, }) {
        if (!/^https?:/i.test(resource.url)) {
            return null;
        }
        if (asyncCache) {
            return await getCachedResource(resource.id, fetchAndUpload, logger);
        }
        else {
            const cachedResource = cache.get(resource.id);
            if (cachedResource) {
                const dependencies = cachedResource.dependencies || [];
                logger.log(`resource retrieved from cache, with dependencies (${dependencies.length}): ${resource.url} with dependencies --> ${dependencies}`);
                return cachedResource;
            }
            return await fetchAndUpload();
        }
        async function fetchAndUpload() {
            var _a;
            try {
                const fetchedResource = await fetchResource({ resource, settings, logger });
                if (utils.types.has(fetchedResource, 'value')) {
                    const dependencies = await extractDependencyUrls({
                        resource: fetchedResource,
                        settings: { sourceUrl: (_a = settings === null || settings === void 0 ? void 0 : settings.headers) === null || _a === void 0 ? void 0 : _a.Referer },
                        logger,
                    });
                    logger.log(`dependencyUrls for ${resource.url} --> ${dependencies}`);
                    fetchedResource.dependencies = dependencies;
                }
                return processContentfulResource({ resource: fetchedResource, logger });
            }
            catch (err) {
                logger.log(`error fetching resource at ${resource.url}, setting errorStatusCode to 504. err=${err}`);
                return (0, resource_1.makeResource)({ ...resource, errorStatusCode: 504 });
            }
        }
    }
    async function processUrlResourceWithDependencies({ resource, settings, logger = mainLogger, }) {
        const processedResourcesWithDependencies = {};
        await doProcessUrlResourceWithDependencies(resource);
        return processedResourcesWithDependencies;
        async function doProcessUrlResourceWithDependencies(resource) {
            const processedResource = await processUrlResource({ resource, settings, logger });
            if (processedResource) {
                processedResourcesWithDependencies[resource.url] = processedResource;
                if (processedResource.dependencies) {
                    const dependencyResources = processedResource.dependencies.flatMap(dependencyUrl => {
                        if (processedResourcesWithDependencies[dependencyUrl])
                            return [];
                        return (0, resource_1.makeResource)({ url: dependencyUrl, environment: settings === null || settings === void 0 ? void 0 : settings.environment });
                    });
                    await Promise.all(dependencyResources.map(doProcessUrlResourceWithDependencies));
                }
            }
        }
    }
    function persistResource({ resource, logger = mainLogger, }) {
        const entry = {
            hash: resource.hash,
            dependencies: resource.dependencies,
        };
        if (utils.types.has(resource, 'value')) {
            if (asyncCache) {
                entry.ready = uploadResource({ resource, logger }).then(() => true);
            }
            else {
                entry.ready = uploadResource({ resource, logger })
                    .then(() => {
                    const entry = cache.get(resource.id);
                    cache.set(resource.id, { ...entry, ready: true });
                    return true;
                })
                    .catch(err => {
                    cache.delete(resource.id);
                    throw err;
                });
            }
        }
        else {
            entry.ready = true;
        }
        cache.set(resource.id, entry);
        return entry;
    }
    async function extractDependencyUrls({ resource, settings, logger = mainLogger, }) {
        try {
            let dependencyUrls = [];
            if (/text\/css/.test(resource.contentType)) {
                dependencyUrls = (0, extract_css_dependency_urls_1.extractCssDependencyUrls)(new TextDecoder().decode(resource.value), {
                    resourceUrl: resource.url,
                    sourceUrl: settings === null || settings === void 0 ? void 0 : settings.sourceUrl,
                });
            }
            else if (/image\/svg/.test(resource.contentType)) {
                dependencyUrls = (0, extract_svg_dependency_urls_1.extractSvgDependencyUrls)(new TextDecoder().decode(resource.value), {
                    resourceUrl: resource.url,
                    sourceUrl: settings === null || settings === void 0 ? void 0 : settings.sourceUrl,
                });
            }
            // avoid recursive dependencies
            return dependencyUrls.filter(dependencyUrl => dependencyUrl !== resource.url);
        }
        catch (e) {
            logger.log(`could not parse ${resource.contentType} ${resource.url}`, e);
            return [];
        }
    }
    // Note: this function is needed since the contract with async cache is to return a serializeable object.
    // So we need to peel off `ready` which is a promise, but still use it as the return value from the callback.
    function getCachedResource(key, callback, logger) {
        return new Promise(async (resolve, reject) => {
            try {
                if (!key) {
                    logger.log('key for async cache is falsy, not accessing async cache (this is an error that!)', key);
                    resolve(await callback());
                    return;
                }
                const resourceFromCache = await asyncCache.getCachedResource(key, async () => {
                    logger.log(`async cache callback called for ${key}`);
                    const ret = await callback();
                    resolve(ret);
                    await ret.ready;
                    // We also want to make sure the value of the resource is not included in the cache. So better yet, just whitelist the properties of KnownResource
                    // See note in KnownResource type
                    return {
                        hash: ret.hash,
                        dependencies: ret.dependencies,
                    };
                });
                logger.log(`return value from async cache for ${key}:`, resourceFromCache);
                resolve(resourceFromCache);
            }
            catch (err) {
                logger.log(`error from async cache for ${key}:`, err);
                reject(err);
            }
        });
    }
}
exports.makeProcessResources = makeProcessResources;
