"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeGetAccountInfo = void 0;
const utils = __importStar(require("@applitools/utils"));
function makeGetAccountInfo({ requests, agentId: defaultAgentId, logger: mainLogger }) {
    return async function getAccountInfo({ settings, logger = mainLogger, }) {
        logger = logger.extend(mainLogger, { tags: [`get-account-base-${utils.general.shortid()}`] });
        settings = { ...settings };
        settings.agentId = `${defaultAgentId} ${settings.agentId ? `[${settings.agentId}]` : ''}`.trim();
        logger.log('Command "getAccountInfo" is called with settings', settings);
        const account = await requests.getAccountInfo({ settings, logger });
        // Note: this is done because account could be cached from the previous request that could have different agentId
        return {
            ...account,
            eyesServer: { ...account.eyesServer, agentId: settings.agentId },
            ufgServer: { ...account.ufgServer, agentId: settings.agentId },
        };
    };
}
exports.makeGetAccountInfo = makeGetAccountInfo;
