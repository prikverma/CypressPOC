"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformDomMapping = void 0;
const fs_1 = require("fs");
const req_1 = require("@applitools/req");
const utils = __importStar(require("@applitools/utils"));
// NOTE:
//
// There was much debate about whether to start transforming CheckSettings
// and whether or not domMapping should live on `target` or `settings`.
//
// Where we landed was this - we didn't want to create a general input
// transformation point in the code base. The compromise was to separate this
// transform out into a separate function, making it explicit, and to reference
// the rationale in a code comment (:wave:).
//
// For details, you can see the discussion in this PR,
// starting at this specific comment:
// https://github.com/applitools/eyes.sdk.javascript1/pull/1886#issuecomment-1700418265
//
async function transformDomMapping(settings) {
    if (utils.types.isString(settings.domMapping)) {
        const str = settings.domMapping;
        if (utils.types.isHttpUrl(str)) {
            const response = await (0, req_1.req)(str, { proxy: settings.autProxy });
            settings.domMapping = new Uint8Array(await response.arrayBuffer());
        }
        else {
            settings.domMapping = await fs_1.promises.readFile(str);
        }
    }
}
exports.transformDomMapping = transformDomMapping;
